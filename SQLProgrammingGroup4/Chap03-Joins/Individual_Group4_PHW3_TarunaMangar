# **Taruna Mangar**

## **Home-Work 3**

# **TOP FIVE*:*

## CHAPTER FOUR- Excerises
## **Excerise Two**

- Write a query that returns all orders placed by the customer(s) who placed the highest number of orders
- Note: there may be more than one customer with the same number of orders
- Tables involved: TSQLV6 database, Orders table

### **ANSWER**

**PROPOSITION:** Write a query that returns the CustomerId, OrderId, OrderDate, and EmployeeId from the Sales.[Order] table for the customer(s) with the highest number of orders.

**TABLES:** Northwinds2022TSQLV7 Database, Sales.[Order] as alias O

**COLUMN:** CustomerId, OrderId, OrderDate and EmployeeId from Sales.[Order].

**PREDICATE:** The query filters the rows from the Sales.[Order] table based on the condition that the CustomerId is included in the subquery's result set. The subquery selects the top CustomerId values (using TOP (1) WITH TIES) based on the count of orders for each customer (GROUP BY O.CustomerId) and orders them in descending order of the count of orders (ORDER BY COUNT(*) DESC). This effectively selects the customer(s) with the highest number of orders.

**WHAT'S SPECIAL: The special aspect of the query lies in its focus on identifying the customer(s) with the highest number of orders. This is achieved through the use of a subquery to calculate the count of orders for each customer and then selecting the top customer(s) with the highest count of orders, ensuring that ties are included. By doing so, the query efficiently identifies the most active customers in terms of order frequency.**



Use TSQLV6
SELECT custid, orderid, orderdate, empid
FROM Sales.Orders
WHERE custid IN
  (SELECT TOP (1) WITH TIES O.custid
   FROM Sales.Orders AS O
   GROUP BY O.custid
   ORDER BY COUNT(*) DESC);

Use Northwinds2022TSQLV7
SELECT CustomerId, OrderId, OrderDate, EmployeeId
FROM Sales.[Order]
WHERE CustomerId IN
  (SELECT TOP (1) WITH TIES O.CustomerId
   FROM Sales.[Order] AS O
   GROUP BY O.CustomerId
   ORDER BY COUNT(*) DESC);
# CHAPTER FOUR- Subueries

### Question 1- Scalar subquery expected to return one value

<img src="https://static.vecteezy.com/system/resources/previews/022/841/114/non_2x/chatgpt-logo-transparent-background-free-png.png" alt="AI" width="20" height="20"> *Written in collaboration with ChatGPT from OpenAI to improve understanding and assist with the explanation of the query.*

**PROPOSITION:** Write a query that returns the order IDs for orders handled by employees whose last name starts with 'C'.

**TABLES:** Northwinds2022TSQLV7 Database, Sales.[Order] and HumanResources.Employee as alias E

**COLUMN:** OrderId from Sales.[Order] table and EmployeeId and EmployeeLastName from HumanResources.Employee table.

**PREDICATE:** The query filters the rows from the Sales.[Order] table based on the condition that the EmployeeId matches the EmployeeId returned by the subquery. The subquery selects the EmployeeId from the HumanResources.Employee table where the EmployeeLastName starts with 'C'.

**WHAT'S SPECIAL: The query is special because it filters orders based on the last names of employees. It finds employees whose last names start with 'C' using a subquery and then selects orders handled by those employees. This method allows for specific selection of orders based on employee attributes.**

Use TSQLV6
SELECT orderid
FROM Sales.Orders
WHERE empid = 
  (SELECT E.empid
   FROM HR.Employees AS E
   WHERE E.lastname LIKE N'C%');

Use Northwinds2022TSQLV7
SELECT OrderId
FROM Sales.[Order]
WHERE  EmployeeId= 
  (SELECT E.EmployeeId
   FROM HumanResources.Employee AS E
   WHERE E.EmployeeLastName LIKE N'C%');

### QUESTION 4- Returning "Previous" or "Next" Value

<img src="https://static.vecteezy.com/system/resources/previews/022/841/114/non_2x/chatgpt-logo-transparent-background-free-png.png" alt="AI" width="20" height="20"> *Written in collaboration with ChatGPT from OpenAI to improve understanding and assist with the explanation of the query.*

**PROPOSITION:** Write a query that returns OrderId, OrderDate, EmployeeId, and CustomerId from the Sales.[Order] table, along with the OrderId of the next order for each record.

**TABLES:** Northwinds2022TSQLV7 Database, Sales.[Order] as alias O2 and Sales.[Order] as alias O1.

**COLUMN:**  OrderId, OrderDate, EmployeeId, and CustomerId from the Sales.[Order] table.

**PREDICATE:** The WHERE clause with the predicate O2.OrderId > O1.OrderId ensures that only orders with OrderId values higher than the current order being processed (O1) are considered in the subquery, thereby determining the next OrderId for each record in the Sales.[Order] table.

**WHAT'S SPECIAL: This query stands out because it uses a special method to find the next OrderId for each order in the Sales.[Order] table. By looking at each OrderId and comparing it with the following ones, the query figures out the next order. This makes it easier to understand the sequence of orders in the dataset, helping with the analysis of order data.**
Use TSQLV6
SELECT orderid, orderdate, empid, custid,
  (SELECT MIN(O2.orderid)
   FROM Sales.Orders AS O2
   WHERE O2.orderid > O1.orderid) AS nextorderid
FROM Sales.Orders AS O1;

Use Northwinds2022TSQLV7
SELECT OrderId, OrderDate, EmployeeId, CustomerId,
  (SELECT MIN(O2.OrderId)
   FROM Sales.[Order] AS O2
   WHERE O2.OrderId > O1.OrderId) AS NextOrderId
FROM Sales.[Order] AS O1;
# CHATPER 5- Exercises

### Question 4

Write a solution using a recursive CTE that returns the management chain leading to Patricia Doyle (employee ID 9) Tables involved: HR.Employees

**PROPOSITION:** Write a query that returns the EmployeeId, EmployeeManagerId, EmployeeFirstName, and EmployeeLastName for the employee with EmployeeId 9 and their direct and indirect subordinates from the HumanResources.Employee table.

**TABLES:** Northwinds2022TSQLV7 Database and HumanResources table.

**COLUMN:** EmployeeId, EmployeeManagerId, EmployeeFirstName, and EmployeeLastName from the HumanResources.Employee table.

**PREDICATE:** Select rows from the HumanResources.Employee table where the EmployeeId is equal to 9 and recursively retrieve rows where the EmployeeManagerId matches the EmployeeId of the previously selected rows, forming a hierarchical structure.

**WHAT'S SPECIAL: This query employs a recursive common table expression (CTE) to retrieve hierarchical data representing the reporting structure within the employee table. It starts with a specific employee (EmployeeId = 9) and recursively retrieves their direct and indirect subordinates. This approach simplifies the process of navigating hierarchical data within the employee table, making it easier to analyze the organizational structure.**
USE TSQLV6;
WITH EmpsCTE AS
(
  SELECT empid, mgrid, firstname, lastname
  FROM HR.Employees
  WHERE empid = 9
  
  UNION ALL
  
  SELECT P.empid, P.mgrid, P.firstname, P.lastname
  FROM EmpsCTE AS C
    INNER JOIN HR.Employees AS P
      ON C.mgrid = P.empid
)
SELECT empid, mgrid, firstname, lastname
FROM EmpsCTE;

USE Northwinds2022TSQLV7;
WITH EmpsCTE AS
(
  SELECT EmployeeId, EmployeeManagerId, EmployeeFirstName, EmployeeLastName
  FROM HumanResources.Employee
  WHERE EmployeeId= 9
  
  UNION ALL
  
  SELECT P.EmployeeId, P.EmployeeManagerId, P.EmployeeFirstName, P.EmployeeLastName
  FROM EmpsCTE AS C
    INNER JOIN HumanResources.Employee AS P
      ON C.EmployeeManagerId = P.EmployeeId
)
SELECT EmployeeId, EmployeeManagerId, EmployeeFirstName, EmployeeLastName
FROM EmpsCTE;
# Chapter Five- Table Expressions

### QUESTION 5-DO NOT rely on OFFSET-FETCH, even if for now the engine does return rows in order

PROPOSITION: Create or update a view named Sales.USACusts to store details of customers located in the USA, including CustomerId, CustomerCompanyName, CustomerContactName, CustomerContactTitle, CustomerAddress, CustomerRegion, CustomerPostalCode, CustomerCountry, CustomerPhoneNumber, and CustomerFaxNumber, retrieved from the Sales.Customer table filtered by the USA.

**TABLES:** Northwinds2022TSQLV7 Database and Sales.Customer table.

**COLUMN:** CustomerId, CustomerCompanyName, CustomerContactName, CustomerContactTitle, CustomerAddress, CustomerRegion, CustomerPostalCode, CustomerCountry, CustomerPhoneNumber, and CustomerFaxNumber from the Sales.Customer.

**VIEW:** Sales.USACusts view

**ATTRIBUTES:** CustomerId, CustomerCompanyName, CustomerContactName, CustomerContactTitle, CustomerAddress, CustomerRegion, CustomerPostalCode, CustomerCountry, CustomerPhoneNumber, and CustomerFaxNumber are extracted from the Sales.USACusts view

**PREDICATE:** Select rows from the Sales.Customer table where the value of the CustomerCountry column is 'USA', and then create or update a view named Sales.USACusts to store these rows.

**WHAT'S SPECIAL: This query is special because it utilizes a view called Sales.USACusts, which acts like a filtered version of the Sales.Customer table, showing only customers from the USA. Views are useful as they provide a simplified way to access data without directly interacting with the underlying tables, making data management easier.**
Use TSQLV6
GO
CREATE OR ALTER VIEW Sales.USACusts
AS
SELECT 
  custid, companyname, contactname, contacttitle, address,
  city, region, postalcode, country, phone, fax
FROM Sales.Customers
WHERE country = N'USA';
GO

Use Northwinds2022TSQLV7
GO
CREATE OR ALTER VIEW Sales.USACusts
AS
SELECT 
  CustomerId, CustomerCompanyName, CustomerContactName, CustomerContactTitle, CustomerAddress,
  CustomerRegion, CustomerPostalCode, CustomerCountry, CustomerPhoneNumber, CustomerFaxNumber
FROM Sales.Customer
WHERE CustomerCountry = N'USA';
GO
# CHAPTER FOUR- Subueries
## **EXERCISE NINE**

Explain the difference between IN and EXISTS

### **ANSWER**

**IN Operator:**

- The IN operator is used to check if a value matches any value in a list of values or the result set of a subquery.
- It is typically used with a static list of values or a subquery that returns a list of values.
- It returns true if the value being evaluated matches any value in the list or the result set, and false otherwise.
### **EXISTS Operator:**

- The EXISTS operator is used to check if a subquery returns any rows.
- It is typically used to check for the existence of rows in a correlated or uncorrelated subquery.
- It returns true if the subquery returns at least one row, and false otherwise.
- It can be used with correlated subqueries, where the inner subquery references columns from the outer query.
# CHAPTER FOUR- Subueries

### QUESTION 2- Orders placed by US customers


**PROPOSITION:** Write a query that returns the CustomerId, OrderId, OrderDate, and EmployeeId for orders placed by customers located in the USA.

**TABLES:** Northwinds2022TSQLV7 Database, Sales.[Order] and Sales.Customer as alias C.

**COLUMN:** CustomerId, OrderId, OrderDate and EmployeeId from Sales.[Order] table and CustomerId and CustomerCountry from Sales.Customer table

**PREDICATE:** The query filters rows from the Sales.[Order] table based on the condition that the CustomerId is included in the result set returned by the subquery. The subquery selects CustomerId from the Sales.Customer table where the CustomerCountry is 'USA'.

**WHAT'S SPECIAL: The special aspect of this query is its ability to retrieve orders from customers located specifically in the USA by using a subquery to filter based on customer country.**

Use TSQLV6
SELECT custid, orderid, orderdate, empid
FROM Sales.Orders
WHERE custid IN
  (SELECT C.custid
   FROM Sales.Customers AS C
   WHERE C.country = N'USA');

Use Northwinds2022TSQLV7
SELECT CustomerId, OrderId, OrderDate, EmployeeId
FROM Sales.[Order]
WHERE CustomerId IN
  (SELECT C.CustomerId
   FROM Sales.Customer AS C
   WHERE C.CustomerCountry = N'USA');
### QUESTION 3- Orders with maximum order ID for each customer

<img src="https://static.vecteezy.com/system/resources/previews/022/841/114/non_2x/chatgpt-logo-transparent-background-free-png.png" alt="AI" width="20" height="20"> *Written in collaboration with ChatGPT from OpenAI to improve understanding and assist with the explanation of the query.*

**PROPOSITION:** Write a query that returns the highest OrderId for the customer with CustomerId 85.

**TABLES:** Northwinds2022TSQLV7 Database, Sales.[Order] as alias O2.

**COLUMN:** CustomerId and OrderId from Sales.[Order] table.

**PREDICATE:** The query filters the rows from the Sales.[Order] table (aliased as O2) based on the condition that the CustomerId is equal to 85.

**WHAT'S SPECIAL: This query efficiently finds the highest OrderId for a specific customer (CustomerId 85) by using the MAX function. It simplifies the process of determining the latest or most recent order for that customer.**
Use TSQLV6
SELECT MAX(O2.orderid)
FROM Sales.Orders AS O2
WHERE O2.custid = 85;

Use Northwinds2022TSQLV7
SELECT MAX(O2.OrderId)
FROM Sales.[Order] AS O2
WHERE O2.CustomerId = 85;

### QUESTION 5- Following returns an empty set


**PROPOSITION:** Write a query that returns the CustomerId and CustomerCompanyName for customers who have not placed any orders.

**TABLES:** Northwinds2022TSQLV7 Database, Sales.Customer and Sales.[Order] as alias O.

**COLUMN:** CustomerId and CustomerCompanyName from the Sales.Customer table and CustomerId from the Sales.[Order] table.

**PREDICATE:** The NOT IN function is used to compare each CustomerId from the Sales.Customer table with the CustomerId column from the Sales.[Order] table obtained via the subquery. 


use TSQLV6
SELECT custid, companyname
FROM Sales.Customers
WHERE custid NOT IN(SELECT O.custid
                    FROM Sales.Orders AS O);

Use Northwinds2022TSQLV7
SELECT CustomerId, CustomerCompanyName
FROM Sales.Customer
WHERE CustomerId NOT IN(SELECT O.CustomerId
                    FROM Sales.[Order] AS O);

### QUESTION 6- Shippers who shipped orders to customer 43

##3 Bug

```
SELECT shipper_id, companyname
FROM Sales.MyShippers
WHERE shipper_id IN
  (SELECT shipper_id
   FROM Sales.Orders
   WHERE custid = 43); 

```

**For this exercise the code provided contains a bug, in the sense that it uses Sales.MyShippers table which does not exist. In the corrected version the query uses Sales.Shippers which is the name of the table to be applied to this query that exist in the database**

**PROPOSITION:** Write a query that returns the ShipperID and CompanyName for shippers linked to orders made by customer 43.

**TABLES:** Northwinds2022TSQLV7 Database, Sales.Shipper and Sales.[Order] table.

**COLUMN:** ShipperId and ShipperCompanyName from Sales.Shipper table and CustomerId from Sales.[Order].

**PREDICATE:** Select shippers from the Sales.Shipper table where the ShipperId is found in the list of ShipperIds associated with orders placed by customer 43 in the Sales.[Order] table.

Use TSQLV6
SELECT shipperid, companyname
FROM Sales.Shippers
WHERE shipperid IN
  (SELECT shipperid
   FROM Sales.Orders
   WHERE custid = 43);

Use Northwinds2022TSQLV7
SELECT ShipperId, ShipperCompanyName
FROM Sales.Shipper
WHERE ShipperId IN
  (SELECT ShipperId
   FROM Sales.[Order]
   WHERE CustomerId = 43);
# CHATPER 5- Exercises

<img src="https://static.vecteezy.com/system/resources/previews/022/841/114/non_2x/chatgpt-logo-transparent-background-free-png.png" alt="AI" width="20" height="20"> *Written in collaboration with ChatGPT from OpenAI to improve understanding and assist with the explanation of the query.*

## Question 6-2
Using the CROSS APPLY operatorand the function you created in exercise 6-1, return, for each supplier, the two most expensive products

**PROPOSITION:** Write a query that returns the SupplierId, CategoryId, ProductId, ProductName, and UnitPrice for the top 2 products by unit price supplied by each supplier, as determined by the Production.TopProduct function in the Production.Product table.

**TABLES:** Northwinds2022TSQLV7 Database and Production.Product table.

**COLUMN:** SupplierId, CategoryId, ProductId, ProductName, and UnitPrice from the Production.Product table.

**TABLE- VALUED FUNCTION:** Production.TopProduct

**PARAMETERS:** @supid, which represents the SupplierId, and @n, indicating the number of top products to retrieve.

**PREDICATE:** Select rows from the Production.Product table and apply the Production.TopProduct function using CROSS APPLY, passing the SupplierId from each row and specifying 2 as the number of top products to retrieve, thus obtaining the SupplierId, CategoryId, ProductId, ProductName, and UnitPrice for the top 2 products by unit price supplied by each supplier.


USE TSQLV6;
DROP FUNCTION IF EXISTS Production.TopProducts;
GO
CREATE FUNCTION Production.TopProducts
  (@supid AS INT, @n AS INT)
  RETURNS TABLE
AS
RETURN
  SELECT TOP (@n) productid, productname, unitprice
  FROM Production.Products
  WHERE supplierid = @supid
  ORDER BY unitprice DESC;
GO
SELECT S.supplierid, S.companyname, P.productid, P.productname, P.unitprice
FROM Production.Suppliers AS S
CROSS APPLY Production.TopProducts(S.supplierid, 2) AS P;



USE Northwinds2022TSQLV7;
DROP FUNCTION IF EXISTS Production.TopProduct;
GO
CREATE FUNCTION Production.TopProduct
  (@supid AS INT, @n AS INT)
  RETURNS TABLE
AS
RETURN
  SELECT TOP (@n) ProductId, ProductName, UnitPrice
  FROM Production.Product
  WHERE SupplierId = @supid
  ORDER BY UnitPrice DESC;
GO
SELECT S.SupplierId, S.CategoryId, P.ProductId, P.ProductName, P.UnitPrice
FROM Production.Product AS S
CROSS APPLY Production.TopProduct(S.SupplierId, 2) AS P;

-- When you’re done, run the following code for cleanup:
DROP VIEW IF EXISTS Sales.VEmpOrders;
DROP FUNCTION IF EXISTS Production.TopProducts;

# CHAPTER FIVE- Table Expressions

### QUESTION 1- Assigning Column Aliases

\-- Following fails

```
SELECT
  YEAR(orderdate) AS orderyear,
  COUNT(DISTINCT custid) AS numcusts
FROM Sales.Orders
GROUP BY orderyear;

```

**This query contains an error where YEAR function was excluded frim the GROUP BY Clause resulting in a syntax error.**

**PROPOSITION:** Write a query that returns the  the count of distinct customers per year, obtained by grouping orders from the Sales.[Order] table by the year of their order date.

**TABLES:** Northwinds2022TSQLV7 Database and Sales.[Order] table.

**COLUMN:** OrderDate and CustomerId from the Sales.[Order] table.

**PREDICATE:** Select rows from the Sales.[Order] table, group them by the year extracted from the OrderDate column using the YEAR() function, and calculate the count of distinct CustomerId values for each year.
USE TSQLV6
SELECT
  YEAR(orderdate) AS orderyear,
  COUNT(DISTINCT custid) AS numcusts
FROM Sales.Orders
GROUP BY YEAR (orderdate);

USE Northwinds2022TSQLV7
SELECT
  YEAR(OrderDate) AS OrderYear,
  COUNT(DISTINCT CustomerId) AS NumCusts
FROM Sales.[Order]
GROUP BY YEAR (OrderDate);


### QUESTION 2- Query with Nested Derived Tables

**PROPOSITION:** Write a query that returns the order years and the corresponding count of distinct customers, where the count exceeds 70, derived from the Sales.[Order] table.

**TABLES:** Northwinds2022TSQLV7 Database and Sales.[Order] table.

**COLUMN:** OrderDate and CustomerId from the Sales.[Order] table.

**PREDICATE:** Select rows from the Sales.[Order] table, pair each order's year extracted from the OrderDate column using the YEAR() function with its corresponding CustomerId values to construct a derived table D1. Then, within the derived table D2, group the results by year, and filter to retrieve only those rows where the count of distinct customers exceeds 70.
USE TSQLV6
SELECT orderyear, numcusts
FROM (SELECT orderyear, COUNT(DISTINCT custid) AS numcusts
      FROM (SELECT YEAR(orderdate) AS orderyear, custid
            FROM Sales.Orders) AS D1
      GROUP BY orderyear) AS D2
WHERE numcusts > 70;

USE Northwinds2022TSQLV7
SELECT OrderYear, NumCusts
FROM (SELECT OrderYear, COUNT(DISTINCT CustomerId) AS NumCusts
      FROM (SELECT YEAR(OrderDate) AS OrderYear, CustomerId
            FROM Sales.[Order]) AS D1
      GROUP BY OrderYear) AS D2
WHERE NumCusts > 70;

### QUESTION 3- External column aliasing

**PROPOSITION:** Write a query that returns the count of distinct customers per year by extracting the year from order dates in the Sales.[Order] table and grouping the results by year."

**TABLES:** Northwinds2022TSQLV7 Database and Sales.[Order] table.

**COLUMN:** OrderDate and CustomerId from the Sales.[Order] table.

**PREDICATE:** Select rows from the Sales.[Order] table, group them by the year extracted from the OrderDate column using the YEAR() function, and calculate the count of distinct CustomerId values for each year.
USE TSQLV6;
WITH C(orderyear, custid) AS
(
  SELECT YEAR(orderdate), custid
  FROM Sales.Orders
)
SELECT orderyear, COUNT(DISTINCT custid) AS numcusts
FROM C
GROUP BY orderyear;
GO

USE Northwinds2022TSQLV7;
WITH C(OrderYear, CustomerId) AS
(
  SELECT YEAR(OrderDate), CustomerId
  FROM Sales.[Order]
)
SELECT OrderYear, COUNT(DISTINCT CustomerId ) AS NumCusts
FROM C
GROUP BY OrderYear;
GO


### QUESTION 4- Creating USACusts View

**PROPOSITION:** Create or update a view named Sales.USACusts to store details of customers from the USA, including their CustomerId and CompanyName. Then, display CustomerId and CustomerCompanyName from the Sales.USACusts view.

**TABLES:** Northwinds2022TSQLV7 Database and Sales.Customer table.

**COLUMN:** CustomerId and CustomerCompanyName from the Sales.Customer table.

**VIEW:** Sales.USACusts view

**ATTRIBUTES:** CustomerId and CustomerCompanyName are extracted from the Sales.USACusts view.

**PREDICATE:** Select rows from the Sales.USACusts view, where Customer Country is USA.

USE TSQLV6;
GO
CREATE OR ALTER VIEW Sales.USACusts
AS
SELECT
  custid, companyname, contactname, contacttitle, address,
  city, region, postalcode, country, phone, fax
FROM Sales.Customers
WHERE country = N'USA';
GO

SELECT custid, companyname
FROM Sales.USACusts;
GO

USE Northwinds2022TSQLV7
GO
CREATE OR ALTER VIEW Sales.USACusts
AS
SELECT
  CustomerId, CustomerCompanyName, CustomerContactName, CustomerContactTitle, CustomerAddress,
  CustomerCity, CustomerRegion, CustomerPostalCode, CustomerCountry, CustomerPhoneNumber, CustomerFaxNumber
FROM Sales.Customer
WHERE CustomerCountry = N'USA';
GO

SELECT CustomerId, CustomerCompanyName
FROM Sales.USACusts;
GO

### QUESTION 6- ENCRYPTION

**PROPOSITION:** Write a query that returns the definition of the Sales.USACusts view, which contains the details of customers located in the USA.

**TABLES:** Northwinds2022TSQLV7 Database. No tables were used.

**COLUMN:** n/a

**VIEW:** Sales.USACusts view

**ATTRIBUTES:** CustomerId, CustomerCompanyName, CustomerContactName, CustomerContactTitle, CustomerAddress, CustomerRegion, CustomerPostalCode, CustomerCountry, CustomerPhoneNumber, and CustomerFaxNumber are extracted from the Sales.USACusts view

**PREDICATE:** Select the definition of the Sales.USACusts view from the database by querying its object definition using the OBJECT_DEFINITION function with the object ID parameter OBJECT_ID('Sales.USACusts').
Use TSQLV6
SELECT OBJECT_DEFINITION(OBJECT_ID('Sales.USACusts'));

Use Northwinds2022TSQLV7
SELECT OBJECT_DEFINITION(OBJECT_ID('Sales.USACusts'));
### QUESTION 7- But when you query the view, you won't see it

**PROPOSITION:** Create or update a view named Sales.USACusts to store details of USA-based customers from the Sales.Customer table. Then, select and display CustomerId, CustomerCompanyName, and CustomerCountry for the customer named 'Customer ABCDE' from the Sales.USACusts view.

**TABLES:** Northwinds2022TSQLV7 Database, Sales.Customer table.

**COLUMN:** CustomerId, CustomerCompanyName, CustomerContactName, CustomerContactTitle, CustomerAddress, CustomerCity, CustomerRegion, CustomerPostalCode, CustomerCountry, CustomerPhoneNumber, and CustomerFaxNumber from the Sales.Customer table.

**VIEW:** Sales.USACusts view

**ATTRIBUTES:** CustomerId, CustomerCompanyName, CustomerContactName, CustomerContactTitle, CustomerAddress, CustomerRegion, CustomerPostalCode, CustomerCountry, CustomerPhoneNumber, and CustomerFaxNumber are extracted from the Sales.USACusts view

**PREDICATE:** Select rows from the Sales.Customer table where the CustomerCountry column equals 'USA', and using this filtered data to create or alter the Sales.USACusts view. Then, the query selects CustomerId, CustomerCompanyName, and CustomerCountry columns from the Sales.USACusts view.

USE TSQLV6;
GO
CREATE OR ALTER VIEW Sales.USACusts
AS
SELECT
  custid, companyname, contactname, contacttitle, address,
  city, region, postalcode, country, phone, fax
FROM Sales.Customers
WHERE country = N'USA';
GO

SELECT custid, companyname, country
FROM Sales.USACusts
WHERE companyname = N'Customer ABCDE';

USE Northwinds2022TSQLV7
GO
CREATE OR ALTER VIEW Sales.USACusts
AS
SELECT
  CustomerId, CustomerCompanyName, CustomerContactName, CustomerContactTitle, CustomerAddress,
  CustomerCity, CustomerRegion, CustomerPostalCode, CustomerCountry, CustomerPhoneNumber, CustomerFaxNumber
FROM Sales.Customer
WHERE CustomerCountry = N'USA';
GO
SELECT CustomerId, CustomerCompanyName, CustomerCountry
FROM Sales.USACusts
WHERE CustomerCompanyName= N'Customer ABCDE';

### QUESTION 8- Creating GetCustOrders function

<img src="https://static.vecteezy.com/system/resources/previews/022/841/114/non_2x/chatgpt-logo-transparent-background-free-png.png" alt="AI" width="20" height="20"> *Written in collaboration with ChatGPT from OpenAI to improve understanding and assist with the explanation of the query.*

**PROPOSITION:** Create or update a function named dbo.GetCustOrders in the Northwinds2022TSQLV7 database. The function takes an input parameter @cid representing a CustomerId and returns a table containing columns orderid, CustomerId, EmployeeId, OrderDate, RequiredDate, ShipToDate, ShipperId, Freight, ShipToName, ShipToAddress, ShipToCity, ShipToRegion, ShipToPostalCode, and ShipToCountry from the Sales.[Order] table, filtered to only include rows where the CustomerId matches the input parameter @cid.

**TABLES:** Northwinds2022TSQLV7 Database, Sales.[Order] table.

**COLUMN:** Orderid, CustomerId, EmployeeId, OrderDate, RequiredDate, ShipToDate, ShipperId, Freight, ShipToName, ShipToAddress, ShipToCity, ShipToRegion, ShipToPostalCode, and ShipToCountry are selected from the Sales.[Order] table.

**VIEW:** Sales.USACusts view

**ATTRIBUTES:** Orderid, CustomerId, EmployeeId, OrderDate, RequiredDate, ShipToDate, ShipperId, Freight, ShipToName, ShipToAddress, ShipToCity, ShipToRegion, ShipToPostalCode, and ShipToCountry are extracted from the Sales.[Order] table to be included in the dbo.GetCustOrders view.

**TABLE-VALUED FUNCTION:** dbo.GetCustOrders

**PARAMETER:** @cid is used in the dbo.GetCustOrders function

**PREDICATE:** Select the rows from the Sales.[Order] table where the CustomerId column matches the input parameter @cid specified in the dbo.GetCustOrders function.
USE TSQLV6;
GO
CREATE OR ALTER FUNCTION dbo.GetCustOrders
  (@cid AS INT) RETURNS TABLE
AS
RETURN
  SELECT orderid, custid, empid, orderdate, requireddate,
    shippeddate, shipperid, freight, shipname, shipaddress, shipcity,
    shipregion, shippostalcode, shipcountry
  FROM Sales.Orders
  WHERE custid = @cid;
GO

USE Northwinds2022TSQLV7;
GO
CREATE OR ALTER FUNCTION dbo.GetCustOrders
  (@cid AS INT) RETURNS TABLE
AS
RETURN
  SELECT Orderid, CustomerId, EmployeeId, OrderDate, RequiredDate,
    ShipToDate, ShipperId, Freight, ShipToName, ShipToAddress, ShipToCity,
    ShipToRegion, ShipToPostalCode, ShipToCountry
  FROM Sales.[Order]
  WHERE CustomerId = @cid;
GO

### QUESTION 9- Apply

**PROPOSITION:** Write a query that returns the ShipperId from the Sales.Shipper table and pairs it with the EmployeeId from the HumanResources.Employee table using the CROSS APPLY operator.

**TABLES:** Northwinds2022TSQLV7 Database, Sales.Shipper and HumanResources.Employee

**COLUMN:** ShipperId is selected from the Sales.Shipper table and paired with the EmployeeId column from the HumanResources.Employee table.

**PREDICATE:** Select the ShipperId column from the Sales.Shipper table and pairi it with the EmployeeId column from the HumanResources.Employee table using the CROSS APPLY operator."
USE TSQLV6
SELECT S.shipperid, E.empid
FROM Sales.Shippers AS S
  CROSS APPLY HR.Employees AS E;

USE Northwinds2022TSQLV7
SELECT S.ShipperId, E.EmployeeId
FROM Sales.Shipper AS S
  CROSS APPLY HumanResources.Employee AS E;

### Question 10- Creation Script for the Function TopOrders

**PROPOSITION:** Write a query that returns the CustomerId, CustomerCompanyName, OrderId, EmployeeId, OrderDate, and RequiredDate from the Sales.Customer table, paired with the top 3 orders for each customer obtained through the dbo.TopOrders function.

**TABLES:** Northwinds2022TSQLV7 Database and Sales.Customer table 

**COLUMN:** CustomerId and CustomerCompanyName from the Sales.Customer table

**VIEW:**  Sales.USACusts

**ATTRIBUTES** CustomerId, CustomerCompanyName, CustomerContactName, CustomerContactTitle, CustomerAddress, CustomerCity, CustomerRegion, CustomerPostalCode, CustomerCountry, CustomerPhoneNumber, and CustomerFaxNumber are included in the Sales.USACusts view

**PREDICATE:** Select rows from the Sales.Customer table where the CustomerCountry attribute is equal to 'USA', thus filtering customers based on their country of origin to populate the Sales.USACusts view.
USE TSQLV6
SELECT
  C.custid, C.companyname,
  A.orderid, A.empid, A.orderdate, A.requireddate 
FROM Sales.Customers AS C
  CROSS APPLY dbo.TopOrders(C.custid, 3) AS A;

USE Northwinds2022TSQLV7;
SELECT
  C.CustomerId, C.CustomerCompanyName,
  A.OrderId, A.EmployeeId, A.OrderDate, A.RequiredDate 
FROM Sales.Customer AS C
  CROSS APPLY dbo.TopOrders(C.CustomerId, 3) AS A;
##
